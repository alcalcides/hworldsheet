ECMAScript   =>  padronização da linguagem Java

tecnologias relacionadas
    nodejs
        interpretador JavaScript
        independência do navegador
    jQuery
        biblioteca
    angular
        google
        aplicações web
        mais declarativa
    react
        facebook
        eq ao angular
    react native
        mobile
    vue
        melhoria do angular
    electron
        github
        interfaces gráficas
        VS Code 
    ionic
        SDK 
    cordova
    jogos
        phaser
        PixiJS
        impact
        melon.js 
        craftyJS

comentário
    //  =>  linha a linha
    /*   */  =>  bloco de linhas comentado

comandos
    não precisa mais terminar com ; (ponto-e-vírgula)
    local html
        dentro do head
        último elemento antes do fechamento da tag body

variáveis
    declaração
        var/let/const tal = 10
        let 
            let a = 5
            a não existirá fora do bloco 
            preferencial em relação ao var
        var 
            útil para variáveis globais
            disponível dentro do escopo
    identificadores
        case sensitive
        não
            number
            espaço
            palavras reservadas
        começa com 
            _
            %
            letra
        suporta caracteres
            alfanumérico
            acentos
            símbolos
    classificação 
        não tipadas (ou tipagem dinâmica)
            typeof
                retorna o tipo de dado na variável
        primitivas
            number  
                Infinity
                NaN
            string
            boolean
        não primitivas
            undefined
                equivalente ao booleano false
                equivalente ao NaN
            object
                array
                null (nada)
                    equivale ao booleano falso
                    equivale ao numérico 0
            function

template string 
    alternativa ao uso de " e '
    `início e fim com crase`
    placeholder
        incorporar variáveis
        ${variavel}
    `olá, ${user}!`

operadores
    aritméticos
        adição (+)
            number + number
        subtração (-)
        multiplicação (*)
        divisão (/)
            retorna o float
        resto (%)
        potencialização (**)
        concatenação (+)
            string + string
        inc/decremento
            ++
            --
            pré-in/decremento
    de atribuição (=)
        variável = expressão
    relacionais
        retorna sempre um booleano
        quais
            >
            <
            >=
            <=
            ==
                não testa o tipo, só o valor
            === 
                testa o tipo e o valor
                idêntico
            !=
            !== 
                testa o tipo e o valor
                desigual restrito

    lógicos 
        retorna sempre um booleano
        quais
            !
                negação
                unário
                !true > false
            &&
                conjunção
                "e"
                binário
            ||
                pipe
                disjunção 
                "ou"
                binário
    ternário
        teste lógico + atribuição dependente
        (expressão booleana) ? (valor para true) : (valor para false)
    composto
        +=
        -=
        *=
        /=
        **=
        %=

precedência de operadores  
    ()
    **
    * / %
    + -
    operadores relacionais (da esquerda pra direita)
    ! && ||

DOM 
    Document object model
    Recursos do navegador para JavaScript
    Árvare de elementos HTML rederizados
    Elementos
        window (janela, documento)
            location (url)
            document
                html
                    head
                        meta
                        title
                        ***
                    body
                        h1
                        p 
                        *** (o que se aplicar)
                write
                    método para inserir caracteres no html
                    write("meu texto")
                    insere no local onde há o script
            history (histórico de navegação do cliente)
            ***
    Selecionando elementos por 
        Marca/tag
            getElementsByTagName() 
        id 
            getElementById()
            id só deve retornar um elemento
        nome
            getElementsByName()
        classe
            getElementsByClassName()
        seletor
            querySelector('seletor css')
            querySelectorAll('seletor css')
                retorna vetor de elementos
    Eventos 
        mouse
            onmouseenter
                cursor entrou no elemento
            onmousemove
                cursor se movendo dentro do elemento 
            onmousedown
                botão esquerdo acionado 
            onmouseup
                botão esquerdo do mouse liberado 
            onclick
                rápido aperto do botão esquerdo 
            onmouseout
                cursor saiu do elemento
            onload
                quando o elemento for carregado

funções
    bloco de código {dentro das chaves}
    function nometal(parametros){}
    ligação html JavaScript
        pelo html
            eventoTal = "fucaoTal()"
        pelo JavaScript (listeners)
            var tal = document.getElementById("tal")
            tal.addEventListener('nomeDoEvento', nomeDaFuncao)

controle de fluxo
    estruturas de condição
        condição simples
            if(condição) {//bla bla bla}
        condição composta
            if (condição) {//bla bla bla}
            else {//bla bla bla}
        condições aninhadas
            if(){}
            else if(){}
            else{}
        condições múltiplas
            switch(expressão){
                case 0:
                    //bla bla bla
                    break
                case 1:....
                default:....
            }
    estruturas de repetição (laços)
        teste lógico no início
            while(expressão){  }
        teste lógico no final
            do {} while()
        com variável de controle
            auto-incrento
            usado quando se sabe a qtd de iterações
            for (inicio; teste; incremento) {}

variáveis compostas
    armazenam vários valores na mesma estrutura
    cada elemento tem
        índice
        valor
    vetores
        ok dados heterogêneos
            inclusive funções
        variável[indice]
        no fundo é um objeto
    objetos
        índices configuráveis
        ok dados heterogêneos
            inclusive funções
        objeto.campo
        reune todas as propriedades dentro da estrutura
        
        
funções
    conjunto de códigos 
    nome
        usado para instanciar
    mecanismo
        chamada da função
        entrega de parâmetros reais
        execução da função
        retorno de valores
    declaração de funções  
        nome
        parâmetros formais
        bloco de códigos
        expressão de retorno
    globais
        console.log()
            transfere dados para o console 

funções controladoras no tempo
    setInterval(string nomeDaFuncao, int xMilisegundos)
        a cada x milisegundos, a função nomeDaFuncao é chamada
        rederização de interfaces
    setTimeout(string nomeDaFuncao, int xMilisegundos)
        após x milisegundos a função é chamada
        redirecionamentos automáticos

armazenamento local
    à prova de atualizar a página (F5)
    objeto global 'localStorage'
        setItem('identificador', valor)
            valor é uma string (USE JSON, se valor não é uma string)
        getItem('identificador')
            retorna o valor guardados 
            retorna null se não houver o índice 'identificador'

JSON
    JavaScript Object Notation
    objeto do tipo string
    conversões tipoNãoString -> JSON 
        JSON.stringify(variavel)
    conversão JSON -> tipoTal
        JSON.parse(variavel)

AJAX
    atualizar conteúdo sem atualizar a página
    sincronia com o servidor
    evento assíncrono 
        não se sabe quando ocorre
        assim que há mudança no server, há atualização no client
    XMLHttpRequest
        classe que implementa AJAX
    fluxo
        var ajax = new XMLHttpRequest()
        ajax.open('GET', 'urlTal')
        ajax.send()
        verificar resposta no console/Network
        chamada automática da função ajax.onreadystatechange, se definida
    Promises 
        objeto usado para processamento assíncrono
        representa um dado que pode estar disponível
            agora
            no futuro
            ou nunca
        é um objeto 
            construtor
                argumento é uma função 
                    que tem dois argumentos que são as funções pré-definidas
                        resolve
                        reject
                    cada qual com um argumento
                        que é o retorno da promessa
                        para cada um dos respectivos casos
                corpo 
                    encapsula o código AJAX tracional com XMLHttpRequest
                        chama resolve() e reject() 
                        passando como argumentos o que será retornado para cada respectivo caso
            método then(...)
                executar quando a resposta chegar
                executar se a resposta vier com status 200
                argumento é uma função com argumento 'response'
            método catch(...)
                executar quando a resposta chegar
                executar se houver erro na requisição
                argumento é uma função com argumento 'error'
        método de instanciação
            minhaPromise()
                .then(function(response){//response === argumento do resolve})
                .catch(function(error){//error === argumento do reject});
