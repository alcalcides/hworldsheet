//Hello World
$ npm init -y #cria o pacote.json
$ npm install express #instala a dependência express
$ touch server.js #cria o arquivo que inicializa a aplicação. Pode ser index.js

const express = require('express') //instancia a dependência express na aplicação
const app = express() //inicializa o express

app.get('/', function(req, res) { 	//quando a url for a raiz da aplicação, isto é, "/"
    res.send('Hello World!')		//retorne "Hello World!"
})

const app.listen(3001) //configura localhost:3001 para rodar a aplicação

$ node server.js #executa a aplicação no servidor nodeJS
//Hello World finalizado

//Nodemon para automatizar reinicializações do servidor após alterações no código
$ npm install --save-dev nodemon #instala só no ambiente de desenvolvimento
$ npm install -D nodemon #idem
$ npm run scriptTal #executa o scriptTal previsto em package.json/scripts

//Docker
sudo docker ps #lista containers que estão rodando
sudo docker pull mongo #instala o container mongo
sudo docker run --name mongodb -p 27017:27017 -d mongo #executa o container mongo instalado
sudo docker ps -a #mostra todos os containers baixados na máquina
sudo docker ps #mostra os containers em execução
sudo docker start mongodb #executa o container já instalado anteriormente	

//conecção com a base de dados usando mongoose
$ npm install mongoose #para usar javaScript para manipular banco de dados
const mongoose = require("mongoose") //No cabeçalho, para poder usar mongoose
mongoose.connect("mongodb://localhost:27017/nodeapi", {
	useUnifiedTopology: true, 
	useNewUrlParser: true}) 

//Arquivo de criação de tabela
const TableOne = mongoose.Schema({title: {type: String, required: true}}) 
mongose.model("EntityTal", TableOne) //Torna TableOne visível para todo o sistema sob o nome EntityTal

//Chamar o script de criação no cliente
require("path/to/models/EntityTal") 

//Idem com o recurso "require-dir"
$ npm install require-dir #automatiza a chamada das tabelas criadas no model, evita require("./src/models/TableTal.js") para cada tabela criada
const requireDir("require-dir") //Instancia a biblioteca require-dir
requireDir("path/to/models") //Instancia todas as tabelas dentro de models/
const table = mongoose.model("EntityTal") //cria a tabela EntityTal e estabele o objeto table como sua referência

table.create({title = "titleTal"}) //cria um registro, equivalente ao INSERT do SQL

//Paginação
$ npm install mongoose-paginate
//No arquivo que cria a tabela
const mongoosePaginate = require("mongoose-paginate")
/* ... const TableSchema = new  mongoose.Schema()... */
TableSchema.plugin(mongoosePaginate)
//Controler:
const item = await Item.paginate({}, {
	page: 1,
	limit: 10
})	

//Controle de páginas 
const { page = 1 } = req.query
//...
const item = await Item.paginate({}, {
	page, // short syntax page: page
	limit: 10
})	

//tornando a api visível externamente
$ npm install cors
//No server.js
const cors = require("cors")
app.use(cors())//totalmente visível