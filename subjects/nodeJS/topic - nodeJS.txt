express
    framework
    gerenciamento de
        rotas
        views

package-lock.json
    cache
    lista de todas as dependências instaladas

server.js/index.js
	abstrai o servidor
	inicialização da aplicação
	a aplicação é um arquivo javaScript

Fluxo básico de uma aplicação node com express
	instanciar o express 
		require('express')
	inicializar o express
		const app = express()
	configurar as rotas
		app.get('/', function(req, res){ ... })
			req
				requisição feita pelo usuário
				guarda as informações da requisição
					IP
					url
					***
			res
				retorno da aplicação ao usuário
				res.send('retorno da aplicação')

nodemon
	mais produtividade: 
		cada alteração salva provoca reinício automático do servidor local node
	dependência local
		só no ambiente de desenvolvimento
		npm install -D nodemon
	uso
		package.json/scripts
			"dev": "nodemon server.js"
		"~ npm run dev"

docker
	container = "emulação" de uma máquina virtual
	útil para implementar banco de dados mongodb
	listar containers em execução
		sudo docker ps 
	instalar containers
		sudo docker pull mongo #instala o container mongo
	executar containers
		sudo docker run --name mongodb -p 27017:27017 -d mongo #primeira execução
		sudo docker run [nomeDoContainer] [direcionamento portaLocal->portaDocker] [containerInstalado]

Banco de Dados MongoDB
	Não relacional
	Interface = Robo 3T (Robomongo),
	Robo 3T (Robomongo)
		Interface gráfica para o MongoDB
	Mongoose
		ORM = object relational mapping
			traduz os dados do BD para objetos javaScript
		manipular o BD com linguagem javaScript
		dispensa o conhecimento de SQL ou similar
		CRUD de BD em javaScript
		npm install mongoose
	implementação
		instanciar o mongoose
			const mongoose = require("mongoose")
		conecção com a base de dados baseTal (baseTal é um 'esquema')
			mongoose.connect("mongodb://localhost:27017/baseTal", {
				useUnifiedTopology: true,
				useNewUrlParser: true}) 
			mongoose.connect("mongodb://user:password@host:27017/baseTal", {
				useUnifiedTopology: true,
				useNewUrlParser: true}) 
	MVC
		Model = tabelas, esquemas
		cada tabela é um arquivo TabelaTal.js
		tabela básica com mongose:
			const mongoose = require('mongoose')
			const ItemSchema = mongoose.Schema({
			    title:{
			        type: String,
			        required: true
			    }
			});
		tornar a tabela visível
			mongoose.model("Item", ItemSchema)
		chamar a criação da tabela no programa cliente
			require("path/to/models/Item")
			com require-dir
				npm install require-dir
				evita chamar todas as entidades dentro de models
				implementação
const requireDir = require("require-dir") // no cabeçalho
//....
requireDir("path/to/models") //Instancia a tabela
const Table = mongoose.model("Table") //Chama a criação da tabela 
Table.create(doc) //cria um novo registro. O parâmetro doc é do tipo JSON

Postman
	IDE para envio e recebimento de dados para um servidor
	Métodos
		GET
			receber dados do servidor
		POST
			enviar dados para o servidor