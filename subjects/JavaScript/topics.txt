ECMAScript   =>  padronização da linguagem Java

tecnologias relacionadas
    nodejs
        interpretador JavaScript
        independência do navegador
    jQuery
        biblioteca
    angular
        google
        aplicações web
        mais declarativa
    react
        facebook
        eq ao angular
    react native
        mobile
    vue
        melhoria do angular
    electron
        github
        interfaces gráficas
        VS Code 
    ionic
        SDK 
    cordova
    jogos
        phaser
        PixiJS
        impact
        melon.js 
        craftyJS

comentário
    //  =>  linha a linha
    /*   */  =>  bloco de linhas comentado

comandos
    não precisa mais terminar com ; (ponto-e-vírgula)

variáveis
    declaração
        var/let/const tal = 10
    identificadores
        case sensitive
        não
            number
            espaço
            palavras reservadas
        começa com 
            _
            %
            letra
        suporta caracteres
            alfanumérico
            acentos
            símbolos
    classificação 
        não tipadas
        primitivas
            number  
                Infinity
                NaN
            string
            boolean
        não primitivas
            undefined
            object
                array
                null (nada)
            function
    typeof
        retorna o tipo de dado na variável

template string 
    alternativa ao uso de " e '
    `início e fim com crase`
    placeholder
        incorporar variáveis
        ${variavel}
    `olá, ${user}!`

operadores
    aritméticos
        adição (+)
            number + number
        subtração (-)
        multiplicação (*)
        divisão (/)
            retorna o float
        resto (%)
        potencialização (**)
        concatenação (+)
            string + string
        inc/decremento
            ++/--
            pré-in/decremento
    de atribuição (=)
        variável = expressão
    relacionais
    lógicos 
    ternário
    composto
        +=
        -=
        *=
        /=
        **=
        %=

precedência de operadores  
    ()
    **
    * / %
    + -