vantagens POO
	confiável
	oportuno
	manutenível
	extensão
	reuso
	natural

História POO
	Simula: Primeira linguagem OO
		Autores
			Ole-Johan Dahl
			Kristen Nygaard 
		Centro Norueguês de Computação
		1962
		simulações computacionais	
	Smalltalk
		Alan Key
		1972
		Xerox PARC
	C++
		Bjarne Stroustrup
		AT&T Bell Labs
		Desempenho e compatibilidade com C

Definições POO
	Kristen Nygaard: um programa:
		é um modelo físico
		simula o comportamento de uma entidade real ou imaginária do mundo
	Alan Key:
		tudo é objeto
		um programa consiste na comunicação entre objetos
		objetos tem sua própria memória (outro objeto)
		todo objeto é a instância de uma classe
		todos os objetos de uma determinada classe aceitam as mesmas mensagens
	Grady Booch
		um objeto possui 
			estado
			comportamento
			identidade
	Desconhecido
		uma liguagem é OO se possui
			abstração (classes, interfaces ...)
			encapsulamento (classes tem atributos e métodos)
			herança (classe pode conter uma cópia de outra)
			polimorfismo (código que serve para classe mãe, serve para a filha


classes
	tipo abstrato de dado
	membros
		atributo: o que cada objeto tem
		método: o que cada objeto faz
		estado: qual a situação de cada objeto
	modela um objeto
	camel case maiúsculo

objeto	
	instanciação de uma classe
	objetos de mesma classe tem mesmos membros, mas valores possivelmente diferentes
	camel case minúsculo

pacotes
	contém
		classes
		interfaces
		enumerações
		outros pacotes (hierarquia)
	camel case minúsculo
	implementados criando-se diretórios
		cada ponto marca um nível hierárquico
			br.com.dominio.pacoteTal (hierarquia inversa)
				ajuda na ordenação dos pacotes
				evita conflitos de pacotes entre projetos diferentes
	package tal; (cabeçalho de arquivo .java)


fornecedores x clientes
	fornecedores
		programador cria/altera uma abstração
	cliente
		programador instancia uma abstração já criada


visibilidade de membros
	nível de acesso aos componentes de uma classe
	tipos
		publico
			+
			visível dentro de todo o projeto
		privado
			-
			visível somente à classe ou classe interna
			não visível à classe herdade
		protegido
			#
			visível ao
				pacote 
				subclasses
		default
			visível apenas dentro do pacote
			package-private


métodos acessores
	get
		retorna determinado atributo do objeto
		atributos booleanos: isOpened()
	set
		atribue determinado valor a um atributo do objeto
		validações aqui são úteis para o cliente
método construtor
	inicializa objetos
	tem o mesmo nome da classe
	função default super();
		primeiro comando do método construtor
		implícito ou oculto (sempre haverá)
palavra chave this
	serve para se referenciar ao objeto que chama a função
	usado para resolver a ambiguidade nos métodos setters
		this.parametroTal = parametroTal


membros estáticos
	modificador static
	vínculo com a classe, não com o objeto
	disponibilidade a partir da criação
	atributos estáticos
		o valor é atribuído à classe
		todos os objetos da classe herdam o atributo estático
		todos os objetos da classe compartilham o mesmo atributo estático
		o atributo é armazenado numa mesma memória 
			acessível a todos os objetos da classe
		ClasseTal.atributoEstaticoTal
		System.in
	métodos estáticos
		não pode instanciar membros não estáticos
		só pode ser chamado sem fazer referência a um objeto específico
			ClasseTal.metodoEstaticoTal()
		System.out.println()

modificadores de classe
	public
	abstract
		não pode ser instanciada
		não pode implementar um objeto
		tipo de dado (ou conjunto de funcionalidades) incompleto
			ou seja, tem que ser completado pela subclasse
		Pode servir como classe mãe
		só pode ter métodos se forem abstratos
		se não tiver atributos, é "equivalente" a uma interface
	final
		não admite classe filha
		classe folha obrigatoriamente
	default: package-private

modificador final para membros
	atributo
		constante
		final float pi = 3.14f
	método final
		não pode ser sobreposto nas classes herdadas	
		obrigatoriamente herdado pelas classes filhas

método abstrato 
	contrário de método concreto
	UML => escrito em itálico
	declarado na classe, mas implementado apenas na classe filha
	só ocorre dentro de
		interface
		classe abstrata

assinatura de um método
	assinatura igual implica
		mesma quantidade de argumentos
		mesmo tipo para cada argumento
		mesma ordem de argumentos na chamada da função
	assinaturas diferentes não implica
		mesmo nome de variáveis
		mesmo retorno


pilares POO
	abstração
		esconder detalhes
		simplificação
		ex
			funções
			classes
	encapsulamento
		construir partes inacessíveis à implementação externa
		interface
			estabelece relação de 
				serviço oferecido pela classe
				objetivo da classe
				o que a classe faz
			modificadores padrão (o compilador insere automaticamente): 
				public 
				abstract 
					visibilidade, modificadores, retorno, nome e assinatura
			boa prática
				atributos da classe fonte com visibilidade não pública
				métodos acessores (get e set) da classe de implementação com visibilidade private
			?pode ter também atributos (mas para quê???)?
				static ou final (???)
		facultativo, mas tem vantagens:
			tornar mudanças internas irrelevantes
			reuso facilitado
			atributos e metodos são implementados na classe de implementação
				classe Tal implements classe InterfaceDaClasseTal
			diminuição de efeitos colaterais
		uma classe pode ter mais de uma interface
			classe Tal implements inter1, inter2, inter3,... 			
	herança*
	polimorfismo*
		

associação entre objetos
	membro(s) de um objeto é um outro objeto
	tipos
		agregação entre classe
			implementa relação "OBJETO AGREGADOR" TEM "OBJETO AGREGADO"
			objeto de tal classe tem 0/1/2... objeto(s) de outra classe
			classe agregadora instancia classes agregadas
				instanciando objetos no método main
				criando atributos do tipo ClasseAgregada
		composição
			É FEITO/COMPOSTO DE
	

herança
	aplicada a
		classes
		interfaces
	copiar membros de uma classe para outra
		classe mãe/superclasse/base
		classe filha/subclasse/derivada
	extends
	forma de uma classe recebe uma cópia dinâmica dos membros de uma outra
	implementa a relação "é um" entre classes diferentes
	classe filha "extends" classe mãe
		em Java, não é possível herdar de mais de uma classe
	especificação/generalização
		classe filha especifica classe mãe
		classe mãe generaliza classe filha
	classe descendente/ancestral
		relação entre classe avó-neta ou mais distante
		classe filha-mãe não é uma classe descendente-ancestral
	raiz/folha
		raiz
			não herda de nenhuma outra classe
			não tem mãe
		folha
			não há nenhuma classe que herde dela
			não tem filha
	tipos de herança
		implementação/pobre
			implementa instanciação para uma classe abstrata
			todos os atributos e métodos são os herdados
			não tem atributos nem métodos específicos
		diferencial
			herda tudo da classe mãe
			tem atributos/métodos não herdados/específico
	Cast
		conversões entre classes vinculadas por herança
		Upcast
			converter objeto de uma classe para sua superclasse
			conversão para um tipo mais genérico
			é automaticamente realizado pelo compilador
			Animal animal = (Animal) new Mamifero(); 
				ou Animal animal = new Mamifero(); //o compilador converte automaticamente
		Downcast
			converter objeto de uma classe para sua classe filha (ou descendente)
			conversão para um tipo mais específico
			Animal animal = new Gato(); Gato tal = (Gato) animal			
			ClassCastException
				Animal animal = new Gato(); Rato rato = (Rato) animal;
				instaceof 
					retorna True se o objeto é de determinada classe ou de alguma superclasse
					if (animal instanceof Rato){Rato rato = (Rato) animal;}
					objetoTal instanceof Object // sempre retorna True



polimorfismo
	objetos podem ser manipulados como sendo da sua superclasse
	nova implementação para um trecho de programa já escrito
		@Override
	tipos de polimorfismo
		sobreposição
			múltipla forma entre classes com herança
			substituição de um metodo na classe filha
				super.funcaoSobrescrita chama função sobrescrita 
			métodos de mesma assinatura
			boa prática: sobrescreva
				toString()
				equals()
					determina se um objeto tem o mesmo conteúdo do outro
					this.equals(thatRsrsrs);
				hashCode()
					se dois objetos retornam hashCode diferentes, eles são diferentes
					se dois objetos retornam o mesmo hashCode, eles podem ser diferentes
			Late binding (vinculação tardia)
				conexão entre o nome de um método e o seu código/programa
				quando há sobreposição de métodos, há um mesmo nome com dois códigos diferentes
				tipos (como vincular tal nome ao código correto?)
					estática
						quando não há 
							sobreposição de métodos
							cast
						compilador da IDE Eclipse sempre usa vinculação estática
							o método/tipo é vinculado ou método/tipo mais generalista
					dinâmica
						o método específico não é confundido pelo método genérico sobrescrito
						vinculação só ocorre em tempo de execução
				se não há sobreposição/cast, a vinculação estática é idêntica à dinâmica

		sobrecarga
			polimorfismo entre métodos de mesmo nome numa classe
			cada método tem uma assinatura diferente



refatoração
	automaticamente pela IDE
	consiste em
		renomear um membro e atualizar o programa para o novo nome
		extrair 
			método
			classe
			superclasse
			interface
		mover mebros para
			superclasse (pull up)
			subclasse (pull down)
			outra classe (move)
	code smell
		código duplicado
		método longo
		muitos comentários
		má modelagem



classes internas (ci) -- carece exercícios práticos
	dentro do escopo da classe externa (ce)
	pouco usado
	um objeto da ci tem que estar vinculado ao da ce
	todos os membros da ce são visíveis a ci
	utilidade
 		só vai ser usada pela classe externa
 		outras classes não poderão acessar a classe interna
	classes anônimas
		ou seria objetos anônimos?
		usado quando é certo que só será usado um objeto para função específica
		funtalTal(new ClasseTal);

