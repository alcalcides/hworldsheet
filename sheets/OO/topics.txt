vantagens OO
	confiável
	oportuno
	manutenível
	extensão
	reuso
	natural

história
	Simuula: Primeira linguagem OO
		Autores
			Ole-Johan Dahl
			Kristen Nygaard 
		Centro Norueguês de Computação
		1962
		simulações computacionais	
	Smalltalk
		Alan Key
		1972
		Xerox PARC
	C++
		Bjarne Stroustrup
		AT&T Bell Labs
		Desempenho e compatibilidade com C

Definições POO
	Kristen Nygaard: um programa:
		é um modelo físico
		simula o comportamento de uma entidade real ou imaginária do mundo
	Alan Key:
		tudo é objeto
		um programa consiste na comunicação entre objetos
		objetos tem sua própria memória (outro objeto)
		todo objeto é a instância de uma classe
		todos os objetos de uma determinada classe aceitam as mesmas mensagens
	Grady Booch
		um objeto possui 
			estado
			comportamento
			identidade
	Desconhecido
		uma liguagem é OO se possui
			abstração (classes, interfaces ...)
			encapsulamento (classes tem atributos e métodos)
			herança (classe pode conter uma cópia de outra)
			polimorfismo (código que serve para classe mãe, serve para a filha


classes
	tipo abstrato de dado
	membros
		atributo: o que cada objeto tem
		método: o que cada objeto faz
		estado: qual a situação de cada objeto
	modela um objeto

objeto	
	instanciação de uma classe
	objetos de mesma classe tem mesmos membros, mas valores possivelmente diferentes


fornecedores x clientes
	fornecedores
		programador cria/altera uma abstração
	cliente
		programador instancia uma abstração já criada


visibilidade
	nível de acesso ao componentes de uma classe
	tipos
		publico
			+
		privado
			-
			somente a classe
		protegido
			#
			visível a
				classe atual 
				sub-classe
		default
			público ao pacote

métodos acessores
	get
		retorna determinado atributo do objeto
	set
		atribue determinado valor a um atributo do objeto

pilares POO
	abstração
		esconder detalhes
		simplificação
		ex
			funções
			classes
	encapsulamento
		construir partes inacessíveis à implementação externa
		interface
			não tem atributos, só os métodos 
			public abstract metodoTal(assinatura)
				abstratos (só visibilidade, modificadores, retorno, nome e assinatura)
				públicos
			atributos da classe fonte com visibilidade não pública
			métodos get e set da classe com visibilidade private
		facultativo, mas tem vantagens:
			tornar mudanças internas irrelevantes
			reuso facilitado
			atributos e metodos são implementados na classe de implementação
				classe Tal implements classe InterfaceDaClasseTal
			diminuição de efeitos colaterais
	herança*
	polimorfismo*
		

associação entre objetos
	atributo(s) de um objeto é um outro objeto
agregação entre classe
	TEM
	objeto de tal classe tem 0/1/2... objeto(s) de outra classe
	classe agregadora instancia classes agregadas
		criando de objetos no método main
		criando atributos do tipo ClasseAgregada
composição
	É FEITO/COMPOSTO DE
	

herança
	copiar membros de uma classe para outra
		classe mãe/superclasse/base
		classe filha/subclasse/derivada
	extends
	forma de uma classe recebe uma cópia dinâmica dos membros de uma outra
	implementa a relação "é um" entre classes diferentes
	classe filha "extends" classe mãe
	especificação/generalização
		classe filha especifica classe mãe
		classe mãe generaliza classe filha
	classe descendente/ancestral
		relação entre classe avó-neta ou mais distante
		classe filha-mãe não é uma classe descendente-ancestral
	raiz/folha
		raiz
			não herda de nenhuma outra classe
			não tem mãe
		folha
			não há nenhuma classe que herde dela
			não tem filha
	tipos de herança
		implementação/pobre
			implementa instanciação para uma classe abstrata
			todos os atributos e métodos são os herdados
			não tem atributos nem métodos específicos
		diferencial
			herda tudo da classe mãe
			tem atributos/métodos não herdados/específico


membros estáticos
	vínculo com a classe, não com o objeto
	atributos estáticos
		o valor é atribuído à classe
		o atributo é armazenado numa mesma memória para todos os objetos da classe
		todos os objetos da classe compartilham o mesmo atributo estático
	métodos estáticos
		pode ser chamado sem fazer referência a um objeto específico


membros abstract/final
	variável final
		final float pi = 3.14f
		constante
	classe abstrata
		não pode ser instanciada
		não pode implementar um objeto
		Pode servir como classe mãe
		só pode ter métodos se forem abstratos
	classe final
		não admite classe filha
		classe folha obrigatoriamente
		não admite herança
	método abstrato
		declarado na classe, mas implementado 
		só ocorre dentro de
			interface
			classe abstrata
	método final
		não pode ser sobreposto nas classes herdadas	
		obrigatoriamente herdado pelas classes filhas

assinatura de um método
	assinatura igual implica
		mesma quantidade de argumentos
		mesmo tipo para cada argumento
		mesma ordem de argumentos na chamada da função
	assinaturas diferentes não implica
		mesmo nome de variáveis
		mesmo retorno

polimorfismo
	objetos podem ser manipulados como sendo da sua superclasse
	nova implementação para um trecho de programa já escrito
		@Override
	tipos de polimorfismo
		sobreposição
			múltipla forma entre classes com herança
			substituição de um metodo na classe filha
			métodos de mesma assinatura
		sobrecarga
			polimorfismo entre métodos de mesmo nome numa classe
			cada método tem uma assinatura diferente
